#!/usr/bin/env python
"""
Minimal script to store history in the mus sqlite database - this tool is supposed
to be executed as prompt_command. Maybe rewrite in nim or so?
"""


import os
import re
import sqlite3
import sys
import time

from mus_db import Record, get_db_connection


# from mus_util import get_base_record
def get_base_record():

    from mus_config import get_config

    rv = {}

    rv['cwd'] = os.getcwd()

    # Gather information!
    if 'MUS_HOST' in os.environ:
        rv['host'] = os.environ['MUS_HOST']
    else:
        import socket
        rv['host'] = socket.gethostname()

    if 'MUS_USER' in os.environ:
        rv['user'] = os.environ['MUS_USER']
    else:
        import getpass
        rv['user'] = getpass.getuser()

    config = get_config()
    if 'tag' in config:
        rv['tags'] = "|" + "|".join(config['tag']) + "|"
    else:
        rv['tags'] = ""

    if 'project' in config:
        rv['projects'] = "|" + "|".join(config['project']) + "|"
    else:
        rv['projects'] = ""

    return rv


stdin = sys.stdin.read().strip()
rc_str, _, message = stdin.strip().split(None, 2)
rc = int(rc_str)
message = message.strip()

ignore_patterns = [
    'ls',
    'ls -[ltrahS]+',
    'pwd',
    'mus log',
]

ignore_regex = re.compile("|".join(ignore_patterns))

if ignore_regex.fullmatch(message):
    # If this is an ignoreable cl - the quit here.
    exit(0)

if message == "":
    """Do not store empty commandlines"""
    exit()


record = Record()
record.prepare()
record.message = message.strip()
record.status = rc
record.type = 'history'

record.save()
