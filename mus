#!/usr/bin/env python3

import logging
import os
import sys
import time
from pathlib import Path

import click
import colorama
from click import echo, style

from mus_db import Record
from mus_util import ColorFormatter, ColorLogger, msec2nice

# Set up color logging
colorama.init(autoreset=True)

logging.setLoggerClass(ColorLogger)
lg = logging.getLogger('mus')
lg.setLevel(logging.WARNING)
logging.getLogger('asyncio').setLevel(logging.WARNING)


# late import to make sure logging is set properly.
from mus_config import (  # NOQA: E402
    get_config,
    get_local_config,
    save_kv_to_local_config,
)
from mus_db import get_db_connection, get_db_path  # NOQA: E402


class AliasedGroup(click.Group):
    # From the click documentation - allows aliases & shortcuts
    def get_command(self, ctx, cmd_name):
        rv = click.Group.get_command(self, ctx, cmd_name)
        if rv is not None:
            return rv
        matches = [x for x in self.list_commands(ctx)
                   if x.startswith(cmd_name)]
        if not matches:
            return None
        elif len(matches) == 1:
            return click.Group.get_command(self, ctx, matches[0])
        ctx.fail('Too many matches: %s' % ', '.join(sorted(matches)))


@click.group(cls=AliasedGroup)
@click.option('-v', '--verbose', count=True)
def cli(verbose):
    if verbose == 1:
        lg.setLevel(logging.INFO)
    elif verbose > 1:
        lg.setLevel(logging.DEBUG)


import mus_cli_search  # NOQA: E402

cli.add_command(mus_cli_search.cmd_search)


@cli.command("tag")
@click.argument("filename")
@click.argument("message", nargs=-1)
def tag(filename, message):

    import mus_util

    message = " ".join(message).strip()
    if not message:
        echo("Must provide a message")
        return

    echo(f"tagging {filename}")
    checksum = mus_util.get_checksum(filename)

    rec = Record()
    rec.prepare()
    rec.type = 'tag'
    rec.message = message
    rec.data['checksum'] = checksum
    rec.data['filename'] = str(Path(filename).resolve())
    rec.save()


@cli.command("file")
@click.argument("filename")
def file_(filename):

    from datetime import datetime

    import mus_util

    db = get_db_connection()

    filename = str(Path(filename).resolve())
    checksum = mus_util.get_checksum(filename)

    echo(f"Checking file {filename}")
    echo(f"Checksum: {checksum}")

    sql = """
        select *
        from muslog
        where json_extract(data, '$.filename') = ?
           OR json_extract(data, '$.checksum') = ?
        order by time desc
        limit 10 """

    result = db.execute(sql, [filename, checksum])
    for rec in result.fetchall():
        rtime =  mus_util.msec2nice(1000*(time.time() - rec.time))
        if Path(rec.data['filename']) == Path(filename):
            same_path_marker = 'p'
            dpath = ''
        else:
            same_path_marker = '.'
            print('x' * 80)
            dpath = style(rec.data['filename'],
                          fg='white', bold=False)
        if rec.data['checksum'] == checksum:
            same_checksum_marker = 'c'
        else:
            same_checksum_marker = '.'

        rtype = mus_util.format_type_short(rec.type)
        message = style(rec.message, fg='white', bold=True)
        echo(f"{rtype}{same_checksum_marker}{same_path_marker} "
             f"{rtime:>7} {message} {dpath}")


@cli.command("log")
@click.argument("message", nargs=-1)
def log(message):
    """Store a log message"""
    rec = Record()
    rec.prepare()
    rec.message = " ".join(message)
    rec.type = 'log'
    rec.save()


@cli.group(cls=AliasedGroup)
def macro():
    """Run a cl macro on multiple input files

    To use macro's you need to prepare your shell. See the README.

    \b
    Arguments:
        -v, -vv  : increase verbosity
        -j<INT>  : no parallel processes to use
        -s<NAME> : save macro for later use
        -l<NAME> : load and run macro
        -d       : dry-run - show what would be executed

    Note, no spaces between the option flag and value are allowed!
    """


@macro.command("list")
def macro_list():
    from mus_macro import find_saved_macros
    for name, val in find_saved_macros().items():
        echo(style(name, fg="green") + ": " + val)


@macro.command("edit")
@click.argument('name')
def macro_edit(name):
    """Drop into EDITOR with the macro of choice"""
    from subprocess import call

    from mus_macro import MACRO_SAVE_PATH

    filename = Path(MACRO_SAVE_PATH).expanduser() / f"{name}.mmc"
    EDITOR = os.environ.get('EDITOR', 'vim')
    call([EDITOR, filename])


@macro.command("stdin-exe", hidden=True)
def macro_cli_exe():

    import multiprocessing
    import re

    from mus_macro import Macro

    raw_macro = sys.stdin.read()
    _ = raw_macro.strip().split(None, 2)
    if len(_) < 3:
        return
    raw_macro = _[2]

    # find & define parameters by parsing start of string
    # stop parsing as soon as no args are found
    no_threads = multiprocessing.cpu_count()
    save_name = None
    load_name = None
    dry_run = False

    while raw_macro:

        if ' ' in raw_macro:
            maybe_arg, macro_rest = raw_macro.split(None, 1)
        else:
            maybe_arg, macro_rest = raw_macro, ''

        if m := re.match('-j([0-9]+)', maybe_arg):
            no_threads = int(m.groups()[0])
        elif m := re.match(r'-s([a-zA-Z]\w*)', maybe_arg):
            save_name = m.groups()[0]
        elif m := re.match(r'-l([a-zA-Z]\w*)', maybe_arg):
            load_name = m.groups()[0]
        elif maybe_arg == '-d':
            dry_run = True
        elif m := re.match(r'-(vv*)', maybe_arg):
            verbose = len(m.groups()[0])
            if verbose == 1:
                lg.setLevel(logging.INFO)
            elif verbose > 1:
                lg.setLevel(logging.DEBUG)
        else:
            break

        # we reach this line only if an argument matched
        raw_macro = macro_rest.strip()

    if raw_macro and load_name:
        lg.warning("specified both a macro to load and macro string"
                   " - unsure what to do")
        return

    macro_args = dict(dry_run=dry_run)

    if raw_macro:
        macro = Macro(raw=raw_macro, **macro_args)
    elif load_name:
        macro = Macro(name=load_name, **macro_args)
    else:
        raise click.UsageError("No macro defined")

    if save_name is not None:
        macro.save(save_name)

    lg.info(f"Executing macro: {macro.raw}")
    lg.info(f"No threads: {no_threads}")

    macro.execute(no_threads)


# DB relat
@cli.group()
def db():
    pass


@db.command("path")
def db_path():
    print(get_db_path())


# CONFIGURATION
@cli.group()
def conf():
    pass


@conf.command("set", context_settings=dict(ignore_unknown_options=True))
@click.argument("key")
@click.argument("val")
def conf_set(key, val):
    save_kv_to_local_config(key, val)


@cli.command("histon")
def histon():
    """Store history for this folder, and below"""
    save_kv_to_local_config("store-history", "yes")


@cli.command("histoff")
def histoff():
    """Store history for this folder, and below"""
    save_kv_to_local_config("store-history", "no")


@conf.command("show")
@click.option("-l", '--local', is_flag=True, default=False,
              help="show only local config.")
def conf_show(local):
    if local:
        conf = get_local_config()
    else:
        conf = get_config()

    print(conf)


if __name__ == "__main__":
    cli()
